array<u32> indices = {
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
};

function void memcpy(ptr<u8> pDst, ptr<u8> pSrc, u64 _size)
{
  ptr<u64> pDst64 = cast<ptr<u64>>(pDst);
  ptr<u64> pSrc64 = cast<ptr<u64>>(pSrc);

  while (_size >= 8)
  {
    valueof(pDst64) = valueof(pSrc64);
    pDst64++;
    pSrc64++;
    _size = _size - 8;
  }
  
  pDst = cast<ptr<u8>>(pDst64);
  pSrc = cast<ptr<u8>>(pSrc64);

  while (_size >= 1)
  {
    valueof(pDst) = valueof(pSrc);
    pDst++;
    pSrc++;
    _size--;
  }
}

const text kernel32dll = "Kernel32.dll";
const text writeFileA = "WriteFile";

voidptr kernel32dll_handle = load_library(kernel32dll);
voidptr writeFileAAddr = get_proc_address(kernel32dll_handle, writeFileA);

extern_func<u8 (const voidptr, const ptr<i8>, u32, ptr<u32>, voidptr)> writeFileAFunc = cast<extern_func<u8 (const voidptr, const ptr<i8>, u32, ptr<u32>, voidptr)>>(writeFileAAddr);

text getStdHandle = "GetStdHandle";
voidptr getStdHandleAddr = get_proc_address(kernel32dll_handle, getStdHandle);
extern_func<voidptr (u32)> getStdHandleFunc = cast<extern_func<voidptr (u32)>>(getStdHandleAddr);

u32 STD_OUTPUT_HANDLE = cast<u32>(-11);
voidptr stdOutHandle = getStdHandleFunc(STD_OUTPUT_HANDLE);

const text outlut = "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF";

function void Print(u8 byte)
{  
  u32 _unused;
  writeFileAFunc(stdOutHandle, outlut + (cast<u64>(byte) * 2), 2, addressof(_unused), null);
}

array<u32, 8> copy;
u64 remainingSize = countof(indices);
u64 offset = 0;

while (remainingSize > 0)
{
  u64 sizeToCopy = 8;

  if (remainingSize < 8)
    sizeToCopy = remainingSize;

  memcpy(cast<ptr<u8>>(copy), cast<ptr<u8>>(indices + offset), sizeToCopy * sizeof(u32));

  array<u8, 4> out;

  u64 i = 0;

  while (i < sizeToCopy / 2)
  {
    out[i] = cast<u8>(copy[i * 2] #<# 4) | cast<u8>(copy[i * 2 + 1]);
    i++;
  }

  i = 0;

  while (i < countof(out))
  {
    Print(out[i]);
    i++;
  }

  remainingSize = remainingSize - sizeToCopy;
  offset = offset + sizeToCopy;
}
