array<u8, 64> block;
array<u8, 64> block100;

u8 i = 0;

while (i < countof(block))
{
  block[i] = i;
  block100[i] = 0xF0 | (i & 0x7);
  i++;
}

//////////////////////////////////////////////////////////////////////

function void memcpy(ptr<u8> pDst, ptr<u8> pSrc, u64 _size)
{
  ptr<u64> pDst64 = cast<ptr<u64>>(pDst);
  ptr<u64> pSrc64 = cast<ptr<u64>>(pSrc);

  while (_size >= 8)
  {
    valueof(pDst64) = valueof(pSrc64);
    pDst64++;
    pSrc64++;
    _size = _size - 8;
  }
  
  pDst = cast<ptr<u8>>(pDst64);
  pSrc = cast<ptr<u8>>(pSrc64);

  while (_size >= 1)
  {
    valueof(pDst) = valueof(pSrc);
    pDst++;
    pSrc++;
    _size--;
  }
}

memcpy(cast<ptr<u8>>(block + 8), cast<ptr<u8>>(block100), 32);

text kernel32dll = "Kernel32.dll";
text writeFileA = "WriteFile";

voidptr kernel32dll_handle = load_library(kernel32dll);
voidptr writeFileAAddr = get_proc_address(kernel32dll_handle, writeFileA);

extern_func<u8 (const voidptr, const ptr<i8>, u32, ptr<u32>, voidptr)> writeFileAFunc = cast<extern_func<u8 (const voidptr, const ptr<i8>, u32, ptr<u32>, voidptr)>>(writeFileAAddr);

text getStdHandle = "GetStdHandle";
voidptr getStdHandleAddr = get_proc_address(kernel32dll_handle, getStdHandle);
extern_func<voidptr (u32)> getStdHandleFunc = cast<extern_func<voidptr (u32)>>(getStdHandleAddr);

u32 STD_OUTPUT_HANDLE = cast<u32>(-11);
voidptr stdOutHandle = getStdHandleFunc(STD_OUTPUT_HANDLE);

u64 _index = 0;
ptr<u8> pResult = cast<ptr<u8>>(block);

text outlut = "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF";

u32 _unused;

while (_index < sizeof(block))
{
  writeFileAFunc(stdOutHandle, outlut + (valueof(pResult + _index) * 2), 2, addressof(_unused), null);

  _index++;
}