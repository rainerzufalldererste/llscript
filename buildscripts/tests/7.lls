array<u64, 256> __block = { 0x0F338DC9C002E955, 0xC002E955D6BD7712, 0xD6BD771243BD0A05, 0x43BD0A055C4D0D86, 0x5C4D0D868825DDB1, 0x8825DDB10A18EA05, 0x0A18EA05169E209B, 0x169E209B776A1F97, 0x776A1F97FBB994EA, 0xFBB994EA365EBD1A, 0x365EBD1A3DFC0807, 0x3DFC08072301334B, 0x2301334B1B047372, 0x1B04737235DF3E30, 0x35DF3E3071FA2D94, 0x71FA2D9439A2BCCE, 0x39A2BCCEFB1FC7ED, 0xFB1FC7ED97B2B2D9, 0x97B2B2D9F3EAA1A6, 0xF3EAA1A6DCB1487D, 0xDCB1487DBC0CED0B, 0xBC0CED0B94E2D9C8, 0x94E2D9C8103592C0, 0x103592C0CA96CFD7, 0xCA96CFD72C9E534B, 0x2C9E534B6C53BD5E, 0x6C53BD5E6CB26848, 0x6CB26848C93F1CE7, 0xC93F1CE7A375264B, 0xA375264BA9EDC995, 0xA9EDC995A89B52DF, 0xA89B52DF9091B935, 0x9091B935E486EBC7, 0xE486EBC77EAAD66E, 0x7EAAD66E1310F362, 0x1310F3625AF32F3E, 0x5AF32F3E8692A050, 0x8692A050B5030A12, 0xB5030A12B5D290D1, 0xB5D290D151577577, 0x5157757723CA49E3, 0x23CA49E39D6BFD04, 0x9D6BFD04E8B7F926, 0xE8B7F92609A1F045, 0x09A1F04521C0BA19, 0x21C0BA193806A700, 0x3806A70089301EC0, 0x89301EC0982197E9, 0x982197E9528B92F4, 0x528B92F421DD95C6, 0x21DD95C660968A2A, 0x60968A2A05AF8CE4, 0x05AF8CE420B0726B, 0x20B0726B573BEFA9, 0x573BEFA9CD8A1826, 0xCD8A18263DF345ED, 0x3DF345ED31FAA841, 0x31FAA841E48ACD17, 0xE48ACD17947BDACF, 0x947BDACFF2A348FC, 0xF2A348FCDFCCEEA3, 0xDFCCEEA324111CA1, 0x24111CA124FCC9D4, 0x24FCC9D449E7014D, 0x49E7014D0C0F2153, 0x0C0F21530500A79C, 0x0500A79CA86E1D57, 0xA86E1D57B2E4E972, 0xB2E4E972BD771669, 0xBD7716694FBC0177, 0x4FBC0177F0C0ED66, 0xF0C0ED6606CB1FB5, 0x06CB1FB508CF7239, 0x08CF72394ED62524, 0x4ED62524737C47F2, 0x737C47F2037C9E1E, 0x037C9E1E47B05994, 0x47B059947CA5BB61, 0x7CA5BB61DBB43B36, 0xDBB43B366D99761B, 0x6D99761B35016A02, 0x35016A020A583DF7, 0x0A583DF70FF2C75D, 0x0FF2C75DC371F1C8, 0xC371F1C8F42DB176, 0xF42DB176CBBEDCBE, 0xCBBEDCBEDB8FCBAD, 0xDB8FCBADC3F5D921, 0xC3F5D92154BE8D4F, 0x54BE8D4FB5A50A17, 0xB5A50A17BC1A59E7, 0xBC1A59E785E3CBA5, 0x85E3CBA5C8974174, 0xC8974174727636B2, 0x727636B2A3DFA902, 0xA3DFA9027CC37203, 0x7CC37203D19D36FD, 0xD19D36FDBF38CB74, 0xBF38CB748F03D1E3, 0x8F03D1E371B120C9, 0x71B120C975541A62, 0x75541A6228F3B49D, 0x28F3B49D06515FAB, 0x06515FAB70A1FBEC, 0x70A1FBECD77307CF, 0xD77307CF5BA1A7A8, 0x5BA1A7A8774679E6, 0x774679E6BE997E59, 0xBE997E5976661143, 0x76661143BEE9E424, 0xBEE9E42406FF6216, 0x06FF6216160BAC3A, 0x160BAC3A57A9C6A1, 0x57A9C6A11CC42027, 0x1CC42027E565A7A6, 0xE565A7A6742598B5, 0x742598B5A85525D4, 0xA85525D4609B2AF6, 0x609B2AF6ECD3AB6A, 0xECD3AB6A89853E16, 0x89853E166006FB68, 0x6006FB682BABB538, 0x2BABB5389D285B60, 0x9D285B60223AF6CE, 0x223AF6CE0DF5E6F6, 0x0DF5E6F61C2E3872, 0x1C2E3872B55905B0, 0xB55905B058C70A58, 0xFE2C690BE0094E76, 0x18BDA6FEB0AD432A, 0xEC1E44794B36DCEF, 0xB36EC9492ED73A7D, 0x19A05220DD37D9B4, 0x9E1E69B2A6F51656, 0xAE42FCBD0FC6BF81, 0x6B724C9FE2F1195A, 0x2EAFA31162E9ECA0, 0x48895BD26262922B, 0x0DBF12B553B2F4EA, 0xB8BCD790BD831D61, 0xE19E8A7149A9B032, 0xB9E075E452E36577, 0x987E72CF984C1091, 0xBCB87B0BD1331EB6, 0x0DF7096194376933, 0x9848BB3E9226BEA1, 0x029EEA9DFD99C194, 0xEB9541AB17F5D38B, 0x18327AED228414EE, 0xD0F59B98408DEEAF, 0xA9FCC71C4C982342, 0x811C493F31B58A4D, 0xBAEF5830C5042A5E, 0x27896889377F3EA1, 0x788D8162BAC768E0, 0x482228B937C238E1, 0x2EFF3AA9EEC220E1, 0x5607D6C7CC2089B8, 0x7A624D8294FE3489, 0x0B94D536BFFCA036, 0xB5DFE8EDB96FF772, 0x188485BB2EFE1444, 0xA7E2AEFF2D1820A3, 0x1A368785588CF157, 0xA63ECF6AB241F92E, 0xBAF46314D33664AF, 0x293A556A8F956161, 0xB00977DA047466A7, 0x28AC1BDFC8112A5C, 0x94AF3CAA1469C6FC, 0x47FB4B9531F545B9, 0x8A657FB5C1F4E372, 0xD63A302CD5748D41, 0x3181D7317A01DB7D, 0x40AC710CEFD092A9, 0x1B6771E8D6B71FDF, 0x9059CC90034A13BF, 0x938D78075CC8B291, 0x91402C9123507D5A, 0xBA771303EB0AE97D, 0x848ED5E192BA8318, 0x833CA7CD518F792D, 0x0E529B1EB62E4D38, 0x1D18BC92875F12A4, 0xB3D202F8DBF367F0, 0xA7014CC29BE7489D, 0xCE792F8335B94D26, 0x6D82EFAF70F7A2AE, 0x3088B952282C9F1D, 0x7417DA64D2A7F073, 0xE8FD46DC76BC09D8, 0xDD109EFFA9E897C9, 0xC9774743F68598EC, 0x37652FB8E138B8E1, 0x24BDCC281A203510, 0x8BF75C39575F1C89, 0x95B992F7ECF749C4, 0x625431EA89A1346C, 0xA8CB126BE3A3C565, 0xFD75F7132AB37828, 0x62A7D8A40F346895, 0x2FD849C2F9A55AE3, 0x5F7D344EC8D98507, 0x7C54594127F64A58, 0x00DBA7FDC6626831, 0x0F54FCA1872462A0, 0x5D5DF6D3579C5650, 0x45FE22390E59B6C9, 0x17FF3C2094A977E0, 0x8BDCD0BEB3466826, 0x51F6CA49AC1E71C1, 0x7A94C5C7D1FF7BAC, 0x311E13CD66FCD671, 0xC6E68738A4BE3235, 0xAC40CAE51BD9D005, 0xE2FDE27EECFCF978, 0x94C15792A7A2530B, 0xBD411583B39E97FB, 0x34C76CB5202C4B79, 0xFBA8BBB8FE0D1A0C, 0x80A76164384E4ADE, 0x04D68D7E08490D67, 0xACB61730F141C2E0, 0xFF9D2969AF047515, 0xE1CABBA1616E987B, 0xDED90A91441D606D, 0x3F59BC4D33DFCF92, 0x44CB0D303CB36700, 0x607D1C41B0783CBD, 0x7EDD04217F6FF4FA, 0x308DA34331BFF3A3, 0xA3C07B48D6AD676E, 0xD1C8E8BC79B63416, 0x9604D9085026F524, 0x9CD74580EE81C886, 0xE661050FD1FF9590, 0x823673229DF8D9DD, 0xCF3A858D3542D59A, 0x588AD81FD1F1D590, 0x51BDA8ED0263E5E3, 0x44EE42F9E3E13547, 0x7926A2DC534608D1, 0xBB414F48B48293E6, 0x66B84917A27FA64C, 0xBC8A86E951EF8360, 0x9A9E7B55711E158A, 0xE9F4EB021DA4AECD, 0xC01E26CF43164D44, 0x44E6F03882BB436C, 0x3C2363F76AC89C60, 0xEF4DE7ACE5CDE12D, 0x914F64522871FDF4, 0xB21B5C31AD032B87, 0x8B1DCCC67E363E8A, 0xBE435378F2653EB4, 0xAC8FD892A720D54C };
array<u64, 256> __iv = { 0x2B5B282208012F7A, 0x08012F7ADBF066B3, 0xDBF066B3B5D48891, 0xB5D48891980E2BD2, 0x980E2BD2D437FF5C, 0xD437FF5C9A8293D5, 0x9A8293D50F69ED07, 0x0F69ED076A7B576B, 0x6A7B576B8B2479C2, 0x8B2479C20612D65F, 0x0612D65F7C2FEE7D, 0x7C2FEE7DA2165A04, 0xA2165A044C06FC20, 0x4C06FC2021B88EDF, 0x21B88EDF8FB370E5, 0x8FB370E5C6AFFE82, 0xC6AFFE82E2AB90A6, 0xE2AB90A6B5FDCF5D, 0xB5FDCF5DB15158EE, 0xB15158EE8F7EA1A2, 0x8F7EA1A2F2B45249, 0xF2B45249A2E3C4E5, 0xA2E3C4E50015498A, 0x0015498A119C367F, 0x119C367F24B59672, 0x24B59672705DBFA7, 0x705DBFA79BF80D11, 0x9BF80D1148199699, 0x48199699ED8DE348, 0xED8DE348417C26B0, 0x417C26B0472A62FE, 0x472A62FEF32381C5, 0xF32381C5DA7307D7, 0xDA7307D7A0FA847B, 0xA0FA847B1C1FF523, 0x1C1FF5232F9BF8BF, 0x2F9BF8BF62FC5A8E, 0x62FC5A8E340746F7, 0x340746F7297CF670, 0x297CF6703B9C8422, 0x3B9C8422FE145445, 0xFE1454455A635CE2, 0x5A635CE27D88B47A, 0x7D88B47AAA7AA1C1, 0xAA7AA1C1641780A1, 0x641780A172E17467, 0x72E17467032306EE, 0x032306EEA1A250CC, 0xA1A250CC69BC6B9B, 0x69BC6B9B35E39CFD, 0x35E39CFD41A5EF85, 0x41A5EF85E63DA2A0, 0xE63DA2A0FF36214C, 0xFF36214C898DEA56, 0x898DEA564CBFAF36, 0x4CBFAF366CC31E38, 0x6CC31E38F5A3BB22, 0xF5A3BB224D4353AC, 0x4D4353ACBAC0F3B5, 0xBAC0F3B501112110, 0x0111211015E19DF6, 0x15E19DF6FBFD729A, 0xFBFD729AD63B1065, 0xD63B10654EACA3A2, 0x4EACA3A299615DF1, 0x99615DF1AB31560E, 0xAB31560EF7CBDD90, 0xF7CBDD90851E8A5D, 0x851E8A5DF7CF86BD, 0xF7CF86BDCCE32528, 0xCCE325285F5DCE50, 0x5F5DCE500A434290, 0x0A4342909C798F95, 0x9C798F95A06828CF, 0xA06828CF77B2C24A, 0x77B2C24A8D7C89F8, 0x8D7C89F8165E2040, 0x165E204020A12CB8, 0x20A12CB8160CE932, 0x160CE9323B892855, 0x3B89285528C71A87, 0x28C71A874E452482, 0x4E452482E5D7538C, 0xE5D7538C3B8128B7, 0x3B8128B7C6C5FE8E, 0xC6C5FE8E20BA1277, 0x20BA127718101C48, 0x18101C484347F262, 0x4347F262F425C30E, 0xF425C30ED12E8DFA, 0xD12E8DFA0B6E0FBF, 0x0B6E0FBFC2F21EF7, 0xC2F21EF70FA1B984, 0x0FA1B9845B27E49F, 0x5B27E49F586B36FC, 0x586B36FC53F5F64C, 0x53F5F64C4E8F0B00, 0x4E8F0B00B6A9D873, 0xB6A9D8730E4A7BE0, 0x0E4A7BE03BD6034E, 0x3BD6034ED69F04D4, 0xD69F04D4FEDE7CB9, 0xFEDE7CB947A8E114, 0x47A8E114AD676D72, 0xAD676D72F48D1412, 0xF48D141228088012, 0x280880123674A9B2, 0x3674A9B2039B60BF, 0x039B60BFF224B843, 0xF224B843A429AD36, 0xA429AD3685C318C9, 0x85C318C9BCBE3EEB, 0xBCBE3EEBDFF77639, 0xDFF776395ECBEA8C, 0x5ECBEA8C88FBCB64, 0x88FBCB6476B7B33B, 0x76B7B33B3DE7E4DE, 0x3DE7E4DEDB6C8D34, 0xDB6C8D34DF9C2A82, 0xDF9C2A829B3F469C, 0x9B3F469C1FAD40C0, 0x1FAD40C03FB7E665, 0x3FB7E665A7E233C2, 0xA7E233C2193C944F, 0x193C944F6282E057, 0x6282E0571AD91778, 0x1AD9177822AF911C, 0x22AF911C45EA73BB, 0x45EA73BB7525474D, 0x7525474D3F093D76, 0x3F093D7668DB211D, 0x68DB211DDF5CAAD2, 0xDF5CAAD22BC83A53, 0x2BC83A53E1A7EF4D, 0xE1A7EF4D6DEAFCD4, 0x6DEAFCD4B550BE11, 0xB550BE115B4E143F, 0x5B4E143F12127802, 0x121278029D3DB9D3, 0x9D3DB9D3CA604480, 0xCA6044804908BB18, 0x4908BB18E02DA93D, 0xE02DA93D4C0A1CE4, 0x4C0A1CE425E8D025, 0x25E8D0255FEBF636, 0x5FEBF636A2E03EB0, 0xA2E03EB09B9DFB80, 0x9B9DFB807B7E4964, 0x7B7E496442846758, 0x428467585D1475F6, 0x5D1475F6B1C2BF27, 0xB1C2BF27002A65D3, 0x002A65D374AF9DD7, 0x74AF9DD782588F5E, 0x82588F5EBADE2250, 0xBADE2250095B5054, 0x095B5054BA952B5A, 0xBA952B5A1603712B, 0x1603712B76CB8EC5, 0x76CB8EC52A921F57, 0x2A921F57A1DC24D7, 0xA1DC24D7D8577F21, 0xD8577F21A54B0121, 0xA54B012109B3BC8F, 0x09B3BC8F1AB91EA3, 0x1AB91EA351BB1A75, 0x51BB1A7550BF15D3, 0x50BF15D3E3769871, 0xE3769871C290C625, 0xC290C6256AEC888B, 0x6AEC888BC56D4117, 0xC56D411799C7D3E9, 0x99C7D3E9344EB9D9, 0x344EB9D90C85D1EE, 0x0C85D1EEBE89B0A4, 0xBE89B0A4DDCC70BD, 0xDDCC70BDFDC0DCE8, 0xFDC0DCE8D48F3CFF, 0xD48F3CFF99D1FC31, 0x99D1FC3131488CA0, 0x31488CA08558D3AA, 0x8558D3AABCEE5D66, 0xBCEE5D66655100B5, 0x655100B5B9B596A7, 0xB9B596A74396AFB3, 0x4396AFB3DD169E8D, 0xDD169E8D3CC86341, 0x3CC863418C875D58, 0x8C875D58818A00E4, 0x818A00E41FDD3CAA, 0x1FDD3CAA832854BC, 0x832854BCE41E7896, 0xE41E78964CAA5E17, 0x4CAA5E177578F78D, 0x7578F78D8E2BAD7F, 0x8E2BAD7F03FC14D7, 0x03FC14D727710D10, 0x27710D1094DE647E, 0x94DE647E48735D89, 0x48735D899DC900F4, 0x9DC900F477111A9A, 0x77111A9A7A973492, 0x7A9734926F0E0A60, 0x6F0E0A6052F565B4, 0x52F565B442F65BAA, 0x42F65BAAEBA6A76B, 0xEBA6A76BBCBEF7B9, 0xBCBEF7B9022562B4, 0x022562B424ADA2CD, 0x24ADA2CDFA521541, 0xFA5215416033648C, 0x6033648CDA405692, 0xDA4056928DE98CA6, 0x8DE98CA616E16C5B, 0x16E16C5B551D85D8, 0x551D85D81DBD2907, 0x1DBD290701C94718, 0x01C9471854798687, 0x547986878307D531, 0x8307D531068539A0, 0x068539A0747EAFF3, 0x747EAFF3829C8689, 0x829C8689A3F1A121, 0xA3F1A121A2B3F52E, 0xA2B3F52ECF74A4B8, 0xCF74A4B8B30217DF, 0xB30217DF5F79F200, 0x5F79F20019550384, 0x19550384E4BA5772, 0xE4BA57724F522EF1, 0x4F522EF1FD90E28A, 0xFD90E28ADAC42F2D, 0xDAC42F2DBF034E52, 0xBF034E524702B446, 0x4702B44617711765, 0x1771176529CB1ADB, 0x29CB1ADBD8174F15, 0xD8174F152C4A6294, 0x2C4A629454A6D591, 0x54A6D59168AD5E0D, 0x68AD5E0D3B1D034D, 0x3B1D034DA6F127B2, 0xA6F127B2322DD25F, 0x322DD25F8F662967, 0x8F66296792FC8798, 0x92FC8798B2576A18, 0xB2576A188952E3A8, 0x8952E3A8C686D2C0, 0xC686D2C0E094EEA4, 0xE094EEA4756FBB51, 0x756FBB51315FE29A, 0x315FE29AD5FFD03C, 0xD5FFD03C9CD296A7, 0x9CD296A7E0CBEDEF, 0xE0CBEDEF00EF5C94, 0x00EF5C94415A78EC };
array<u8, 2048> __seed;

ptr<u8> __pBlock = cast<ptr<u8>>(__block);

u64 block = cast<u64>(__pBlock);
u64 size = sizeof(__block);
u64 ivptr = cast<u64>(cast<ptr<u8>>(__iv));
u64 seedptr = cast<u64>(cast<ptr<u8>>(__seed));

ptr<u8> pBlock = cast<ptr<u8>>(block);
u64 clampedRemainingSize = size;
ptr<u8> pIV = cast<ptr<u8>>(ivptr);
ptr<u8> pSeed8 = cast<ptr<u8>>(seedptr);
ptr<u64> pSeed = cast<ptr<u64>>(pSeed8);

if (clampedRemainingSize >= 1024)
  clampedRemainingSize = 1024;

array<u32, 255> rotc = {
  41, 8, 31, 19, 14, 20, 48, 27, 43, 22, 14, 26, 48, 5, 32, 42, 9, 10, 42, 0, 16, 12, 55, 1, 59, 0, 45, 24, 39, 61, 18, 3, 26, 20, 30, 54, 9, 17, 13, 51, 44, 52, 30, 57, 51, 29, 39, 7, 57, 0, 37, 19, 32, 24, 60, 56, 63, 28, 39, 7, 45, 19, 43, 51, 26, 28, 40, 17, 59, 51, 10, 62, 35, 36, 42, 55, 36, 33, 44, 23, 33, 0, 50, 22, 30, 47, 7, 6, 38, 53, 59, 15, 60, 36, 31, 27, 32, 13, 11, 4, 3, 24, 13, 38, 4, 9, 29, 13, 48, 25, 45, 34, 8, 56, 25, 54, 28, 45, 3, 54, 4, 4, 59, 8, 53, 40, 54, 55, 21, 19, 17, 10, 39, 41, 35, 49, 52, 24, 2, 9, 60, 62, 16, 20, 46, 60, 29, 53, 27, 57, 44, 46, 34, 63, 52, 2, 10, 34, 47, 58, 16, 33, 40, 37, 6, 21, 63, 50, 50, 41, 62, 23, 21, 58, 6, 26, 31, 6, 11, 29, 50, 12, 5, 41, 5, 37, 37, 32, 22, 48, 31, 25, 56, 43, 57, 2, 23, 8, 1, 52, 23, 18, 36, 35, 16, 11, 14, 33, 62, 2, 58, 38, 15, 14, 1, 12, 7, 5, 34, 18, 46, 61, 22, 17, 58, 21, 11, 28, 61, 12, 42, 25, 30, 3, 46, 56, 40, 27, 55, 47, 43, 53, 15, 61, 49, 44, 49, 47, 1, 38, 35, 20, 15, 18, 49
};

array<u32, 255> piln = {
  28, 194, 160, 136, 135, 110, 148, 104, 97, 250, 66, 196, 76, 195, 248, 117, 39, 19, 241, 247, 254, 27, 62, 33, 5, 89, 85, 128, 221, 185, 29, 239, 177, 36, 114, 170, 125, 201, 202, 17, 142, 198, 228, 77, 165, 133, 224, 223, 138, 78, 219, 112, 49, 9, 183, 174, 214, 52, 218, 151, 59, 129, 111, 15, 6, 237, 92, 65, 182, 23, 178, 244, 131, 102, 226, 124, 227, 31, 200, 190, 252, 121, 139, 126, 209, 164, 143, 70, 162, 175, 215, 24, 225, 144, 123, 54, 229, 26, 98, 87, 166, 95, 21, 74, 14, 82, 222, 105, 2, 99, 60, 68, 186, 8, 73, 169, 118, 134, 42, 84, 152, 4, 0, 206, 94, 155, 149, 172, 13, 101, 204, 234, 212, 246, 197, 47, 184, 93, 10, 50, 81, 243, 140, 72, 61, 83, 91, 179, 63, 75, 233, 232, 211, 146, 12, 20, 96, 55, 16, 187, 193, 108, 242, 53, 181, 122, 171, 132, 240, 238, 80, 188, 176, 34, 44, 103, 230, 88, 220, 37, 192, 32, 120, 231, 153, 67, 137, 207, 46, 154, 116, 71, 235, 38, 43, 40, 35, 30, 48, 158, 18, 51, 127, 56, 119, 90, 159, 41, 11, 115, 57, 147, 130, 145, 205, 191, 161, 25, 216, 156, 113, 79, 22, 249, 253, 189, 69, 199, 106, 3, 157, 208, 173, 150, 167, 58, 100, 107, 109, 45, 213, 245, 1, 251, 64, 236, 203, 163, 180, 217, 168, 7, 86, 141, 210
};

u64 i = 0;

//////////////////////////////////////////////////////////////////////
i = 0;

while (i <= (clampedRemainingSize - 1))
{
  valueof(addressof(pBlock[i])) = pBlock[i] ^ pIV[i];
  i++;
}
//////////////////////////////////////////////////////////////////////

function void memcpy(ptr<u8> pDst, ptr<u8> pSrc, u64 _size)
{
  ptr<u64> pDst64 = cast<ptr<u64>>(pDst);
  ptr<u64> pSrc64 = cast<ptr<u64>>(pSrc);

  while (_size >= 8)
  {
    valueof(pDst64) = valueof(pSrc64);
    pDst64++;
    pSrc64++;
    _size = _size - 8;
  }
  
  pDst = cast<ptr<u8>>(pDst64);
  pSrc = cast<ptr<u8>>(pSrc64);

  while (_size >= 1)
  {
    valueof(pDst) = valueof(pSrc);
    pDst++;
    pSrc++;
    _size--;
  }
}

memcpy(cast<ptr<u8>>(pSeed), cast<ptr<u8>>(pIV), 2048);
memcpy(cast<ptr<u8>>(pSeed), cast<ptr<u8>>(pBlock), clampedRemainingSize);

u64 t;
array<u64, 16> bc;
array<u8, 1024> oldData;

ptr<u8> pBlockOffset = pBlock + 1024;
u64 remainingSize = size - clampedRemainingSize;

while (remainingSize >= 1)
{
  u64 clampedSize = remainingSize;

  if (clampedSize >= 1024)
    clampedSize = 1024;

  remainingSize = remainingSize - clampedSize;

  //////////////////////////////////////////////////////////////////////
  u64 r = 0;

  while (r <= 254)
  {
    //////////////////////////////////////////////////////////////////////
    i = 0;

    while (i <= 15)
    {
      valueof(addressof(bc[i])) = pSeed[i] ^ pSeed[i + 16] ^ pSeed[i + 32] ^ pSeed[i + 48] ^ pSeed[i + 64] ^ pSeed[i + 80] ^ pSeed[i + 96] ^ pSeed[i + 112] ^ pSeed[i + 128] ^ pSeed[i + 144] ^ pSeed[i + 160] ^ pSeed[i + 176] ^ pSeed[i + 192] ^ pSeed[i + 208] ^ pSeed[i + 224] ^ pSeed[i + 240];
      i++;
    }
    //////////////////////////////////////////////////////////////////////

    u64 j = 0;

    //////////////////////////////////////////////////////////////////////
    i = 0;

    while (i <= 15)
    {
      u64 rot_l_base = bc[(i + 1) & 15];

      t = bc[(i + 15) & 15] ^ ((rot_l_base #<# 1) | (rot_l_base #># 63));
      
      //////////////////////////////////////////////////////////////////////
      j = 0;

      while (j <= 255)
      {
        valueof(addressof(pSeed[j + i])) = pSeed[j + i] ^ t;
        j = j + 16;
      }
      //////////////////////////////////////////////////////////////////////
       
      i++;
    }
    //////////////////////////////////////////////////////////////////////

    t = pSeed[1];
    
    //////////////////////////////////////////////////////////////////////
    i = 0;
    
    while (i <= 254)
    {
      j = piln[i];
      valueof(addressof(bc[0])) = pSeed[j];
      valueof(addressof(pSeed[j])) = (t #<# rotc[i]) | (t #># (64 - rotc[i]));
      t = bc[0];

      i++;
    }
    //////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    j = 0;
    
    while (j <= 254)
    {
      //////////////////////////////////////////////////////////////////////
      i = 0;

      while (i <= 15)
      {
        valueof(addressof(bc[i])) = pSeed[j + i];
        i++;
      }
      //////////////////////////////////////////////////////////////////////
      
      //////////////////////////////////////////////////////////////////////
      i = 0;

      while (i <= 15)
      {
        valueof(addressof(pSeed[j + i])) = pSeed[j + i] ^ ((~(bc[(i + 1) & 15])) & bc[(i + 2) & 15]);
        i++;
      }
      //////////////////////////////////////////////////////////////////////

      j = j + 16;
    }
    //////////////////////////////////////////////////////////////////////

    valueof(addressof(pSeed[0])) = pSeed[0] ^ pIV[r];
    r++;
  }
  //////////////////////////////////////////////////////////////////////

  memcpy(oldData, pBlockOffset, clampedSize);
  
  //////////////////////////////////////////////////////////////////////
  i = 0;

  while (i <= (clampedSize - 1))
  {
    valueof(addressof(pBlockOffset[i])) = pBlockOffset[i] ^ pSeed8[i];
    i++;
  }
  //////////////////////////////////////////////////////////////////////
  
  //////////////////////////////////////////////////////////////////////
  i = 0;
  
  while (i <= (clampedSize - 1))
  {
    valueof(addressof(pSeed8[i])) = pSeed8[i] ^ oldData[i];
  
    i++;
  }
  //////////////////////////////////////////////////////////////////////

  pBlockOffset = pBlockOffset + 1024;
}

//////////////////////////////////////////////////////////////////////

text kernel32dll = "Kernel32.dll";
text writeFileA = "WriteFile";

voidptr kernel32dll_handle = load_library(kernel32dll);
voidptr writeFileAAddr = get_proc_address(kernel32dll_handle, writeFileA);

extern_func<u8 (const voidptr, const ptr<i8>, u32, ptr<u32>, voidptr)> writeFileAFunc = cast<extern_func<u8 (const voidptr, const ptr<i8>, u32, ptr<u32>, voidptr)>>(writeFileAAddr);

text getStdHandle = "GetStdHandle";
voidptr getStdHandleAddr = get_proc_address(kernel32dll_handle, getStdHandle);
extern_func<voidptr (u32)> getStdHandleFunc = cast<extern_func<voidptr (u32)>>(getStdHandleAddr);

u32 STD_OUTPUT_HANDLE = cast<u32>(-11);
voidptr stdOutHandle = getStdHandleFunc(STD_OUTPUT_HANDLE);

u64 _index = 0;
ptr<u8> pResult = cast<ptr<u8>>(__block);

text outlut = "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF";

u32 _unused;

while (_index < sizeof(__block))
{
  writeFileAFunc(stdOutHandle, outlut + (valueof(pResult + _index) * 2), 2, addressof(_unused), null);

  _index++;
}